module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("tcb-admin-node");

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: external "tcb-admin-node"
var external_tcb_admin_node_ = __webpack_require__(0);
var external_tcb_admin_node_default = /*#__PURE__*/__webpack_require__.n(external_tcb_admin_node_);

// CONCATENATED MODULE: ./src/config/error.config.ts
const TCB_ERR_CODE = {
  // 通用
  SUCCESS: 0,
  SYS_ERR: -501001,
  SERVER_TIMEOUT: -501002,
  EXCEED_REQUEST_LIMIT: -501003,
  EXCEED_CONCURRENT_REQUEST_LIMIT: -501004,
  INVALIID_ENV: -501005,
  INVALID_COMMON_PARAM: -501006,
  INVALID_PARAM: -501007,
  INVALID_REQUEST_SOURCE: -501008,
  RESOURCE_NOT_INITIAL: -501009,
  // 数据库
  DATABASE_REQUEST_FAILED: -502001,
  DATABASE_INVALID_OPERRATOR: -502002,
  DATABASE_PERMISSION_DENIED: -502003,
  DATABASE_COLLECTION_EXCEED_LIMIT: -502004,
  DATABASE_COLLECTION_NOT_EXIST: -502005,
  // 文件
  STORAGE_REQUEST_FAIL: -503001,
  STORAGE_EXCEED_AUTHORITY: -503002,
  STORAGE_FILE_NONEXIST: -503003,
  STORAGE_SIGN_PARAM_INVALID: -503004,
  // 云函数
  FUNCTIONS_REQUEST_FAIL: -504001,
  FUNCTIONS_EXECUTE_FAIL: -504002
};
const ERR_CODE = {
  '-1': 'unknown error',
  UNKNOWN_ERROR: -1,
  // 以 6 开始的是由微信服务器侧产生的错误码
  // 以 5 开始的是由腾讯云侧产生的错误码
  // 以 4 开始的是本地 SDK 产生的错误
  // 接下来两位表示具体业务类型：01通用，02数据库，03文件，04云函数
  // 最后三位表示具体的错误
  // 小程序 SDK 云函数
  '-401002': 'error param',
  SDK_API_PARAMETER_ERROR: -401002,
  '-404001': 'empty call result',
  SDK_FUNCTIONS_EMPTY_CALL_RESULT: -404001,
  '-404002': 'empty event id',
  SDK_FUNCTIONS_EMPTY_EVENT_ID: -404002,
  '-404003': 'empty poll url',
  SDK_FUNCTIONS_EMPTY_POLL_URL: -404003,
  '-404004': 'empty poll result json',
  SDK_FUNCTIONS_EMPTY_POLL_RESULT_JSON: -404004,
  '-404005': 'exceed max poll retry',
  SDK_FUNCTIONS_EXCEED_MAX_POLL_RETRY: -404005,
  '-404006': 'empty poll result base resp',
  SDK_FUNCTIONS_EMPTY_POLL_RESULT_BASE_RESP: -404006,
  '-404007': 'error while polling for the result, poll result base resp ret %s',
  SDK_FUNCTIONS_POLL_RESULT_BASE_RESP_RET_ABNORMAL: -404007,
  '-404008': 'error while polling for the result, polling server return a status code of %s',
  SDK_FUNCTIONS_POLL_RESULT_STATUS_CODE_ERROR: -404008,
  '-404009': 'error while polling for the result: %s',
  SDK_FUNCTIONS_POLL_ERROR: -404009,
  // 微信服务器
  '-601001': 'system error',
  WX_SYSTEM_ERROR: -601001,
  '-601002': 'system args error',
  WX_SYSTEM_ARGS_ERROR: -601002,
  '-601003': 'system network error',
  WX_SYSTEM_NETWORK_ERROR: -601003,
  '-604100': 'API not found',
  WX_FUNCTIONS_SERVER_OPENAPI_NOT_FOUND: -604100,
  '-604101': 'function has no permission to call this API',
  WX_FUNCTIONS_SERVER_OPENAPI_NO_PERMISSION: -604101,
  '-604102': 'call open API timeout',
  WX_FUNCTIONS_SERVER_OPENAPI_TIMEOUT: -604102,
  '-604103': 'call open API system error',
  WX_FUNCTIONS_SERVER_OPENAPI_SYSTEM_ERROR: -604102,
  // 腾讯云通用
  '-501001': 'resource system error',
  TCB_RESOURCE_SYSTEM_ERROR: -501001,
  '-501002': 'resource server timeout',
  TCB_RESOURCE_SERVER_TIMEOUT: -501002,
  '-501003': 'exceed request limit',
  TCB_EXCEED_REQUEST_LIMIT: -501003,
  '-501004': 'exceed concurrent request limit',
  TCB_EXCEED_CONCURRENT_REQUEST_LIMIT: -501004,
  '-501005': 'invalid env',
  TCB_INVALID_ENV: -501005,
  '-501006': 'invalid common parameters',
  TCB_INVALID_COMMON_PARAM: -501006,
  '-501007': 'invalid parameters',
  TCB_INVALID_PARAM: -501007,
  '-501008': 'invalid request source',
  TCB_INVALID_REQUEST_SOURCE: -501008,
  '-501009': 'resource not initialized',
  TCB_RESOURCE_NOT_INITIALIZED: -501009,
  // 腾讯云数据库
  '-502001': 'database request fail',
  TCB_DB_REQUEST_FAIL: -502001,
  '-502002': 'database invalid command',
  TCB_DB_INVALID_COMMAND: -502002,
  '-502003': 'database permission denied',
  TCB_DB_PERMISSION_DENIED: -502003,
  '-502004': 'database exceed collection limit',
  TCB_DB_EXCEED_COLLECTION_LIMIT: -502004,
  '-502005': 'database collection not exists',
  TCB_DB_COLLECTION_NOT_EXISTS: -502005,
  // 腾讯云文件管理
  '-503001': 'storage request fail',
  TCB_STORAGE_REQUEST_FAIL: -503001,
  '-503002': 'storage permission denied',
  TCB_STORAGE_PERMISSION_DENIED: -503002,
  '-503003': 'storage file not exists',
  TCB_STORAGE_FILE_NOT_EXISTS: -503003,
  '-503004': 'storage invalid sign parameter',
  TCB_STORAGE_INVALID_SIGN_PARAM: -503004,
  // 腾讯云云函数
  '-504001': 'functions request fail',
  TCB_FUNCTIONS_REQUEST_FAIL: -504001,
  '-504002': 'functions execute fail',
  TCB_FUNCTIONS_EXEC_FAIL: -504002
};

// CONCATENATED MODULE: ./src/util/type.ts
function getType(x) {
  return Object.prototype.toString.call(x).slice(8, -1).toLowerCase();
}

function isString(x) {
  return getType(x) === 'string';
}


// CONCATENATED MODULE: ./src/util/msg.ts
function apiSuccessMsg(apiName) {
  return `${apiName}:ok`;
}

function apiFailMsg(apiName, msg) {
  return `${apiName}:fail ${msg}`;
}


// CONCATENATED MODULE: ./src/util/error.ts




class error_CloudSDKError extends Error {
  constructor(options) {
    super(options.errMsg);
    this.errCode = -1;
    Object.defineProperties(this, {
      message: {
        get() {
          return `errCode: ${this.errCode} ${ERR_CODE[this.errCode] || ''} | errMsg: ${this.errMsg}`;
        },

        set(msg) {
          this.errMsg = msg;
        }

      }
    });
    this.errCode = options.errCode || -1;
    this.errMsg = options.errMsg;
    this.requestId = options.requestId;
  }

  get message() {
    return `errCode: ${this.errCode} | errMsg: ${this.errMsg}`;
  }

  set message(msg) {
    this.errMsg = msg;
  }

}

function isSDKError(error) {
  return error && error instanceof Error && isString(error.errMsg);
}

function returnAsCloudSDKError(err, appendMsg = '') {
  if (err) {
    if (isSDKError(err)) {
      if (appendMsg) {
        err.errMsg += `; ${appendMsg}`;
      }

      return err;
    }

    const errCode = err ? err.errCode : undefined;
    const errMsg = `${err ? err.errMsg || err.toString() || 'unknown error' : ''}; ${appendMsg}`;
    return new error_CloudSDKError({
      errCode,
      errMsg
    });
  }

  return new error_CloudSDKError({
    errMsg: appendMsg
  });
}

function returnAsFinalCloudSDKError(err, apiName) {
  const e = returnAsCloudSDKError(err);
  e.errMsg = apiFailMsg(apiName, e.errMsg);
  return e;
}


// CONCATENATED MODULE: ./src/util/assert.ts




function validType(input, ref, name = 'parameter') {
  function validTypeImpl(input, ref, name) {
    const inputType = getType(input);
    const refType = getType(ref);

    if (refType === 'string') {
      if (inputType !== ref) {
        return `${name} should be ${ref} instead of ${inputType};`;
      }

      return '';
    }

    if (inputType !== refType) {
      return `${name} should be ${refType} instead of ${inputType}; `;
    }

    let errorMsg = '';

    switch (inputType) {
      case 'object':
        {
          // eslint-disable-next-line guard-for-in
          // eslint-disable-next-line no-restricted-syntax
          for (const key in ref) {
            errorMsg += validTypeImpl(input[key], ref[key], `${name}.${key}`);
          }

          break;
        }
    }

    return errorMsg;
  }

  const error = validTypeImpl(input, ref, name);
  return {
    passed: !error,
    reason: error
  };
} // eslint-disable-next-line max-params


function assertType(param, ref, name = 'parameter', ErrorClass = error_CloudSDKError) {
  // check param validity
  const paramCheckResult = validType(param, ref, name);

  if (!paramCheckResult.passed) {
    throw new ErrorClass({
      errMsg: paramCheckResult.reason
    });
  }
} // eslint-disable-next-line max-params


function assertRequiredParam(param, name, funcName, ErrorClass = error_CloudSDKError) {
  if (param === undefined || param === null) {
    throw new ErrorClass({
      errMsg: `parameter ${name} of function ${funcName} must be provided`
    });
  }
}

function assertObjectNotEmpty({
  target,
  name,
  ErrorClass = error_CloudSDKError
}) {
  if (Object.keys(target).length === 0) {
    throw new ErrorClass({
      errCode: ERR_CODE.SDK_API_PARAMETER_ERROR,
      errMsg: `${name} must not be empty`
    });
  }
} // eslint-disable-next-line max-params


function assertArrayNotEmpty(target, name, funcName, ErrorClass = error_CloudSDKError) {
  if (!Array.isArray(target) || target.length === 0) {
    throw new ErrorClass({
      errMsg: `parameter ${name} of function ${funcName} must be a none empty array`
    });
  }
}


// CONCATENATED MODULE: ./src/function/callFunction.ts




async function callFunction(options) {
  const apiName = 'callFunction';

  try {
    if (!options) {
      throw {
        errMsg: `Params for callFunction must be an object instead of ${typeof options}`
      };
    }

    assertType(options, {
      name: 'string'
    });

    if (Object.prototype.hasOwnProperty.call(options, 'data')) {
      assertType(options, {
        data: 'object'
      });
    }

    const res = await this.getTcbInstance({
      config: options.config,
      type: 'function'
    }).callFunction({
      name: options.name,
      data: options.data
    });

    if (res.code && TCB_ERR_CODE[res.code] !== 0) {
      throw {
        errCode: TCB_ERR_CODE[res.code] || TCB_ERR_CODE.SYS_ERR,
        errMsg: `requestID ${res.requestId}, ${res.message}`,
        requestId: res.requestId
      };
    } else {
      return {
        result: res.result,
        requestId: res.requestId
      };
    }
  } catch (err) {
    throw returnAsFinalCloudSDKError(err, apiName);
  }
}


// CONCATENATED MODULE: ./src/tool/getQQContext.ts
function getQQContext() {
  const qqContext = {
    OPENID: process.env.QQ_OPENID,
    APPID: process.env.QQ_APPID,
    ENV: process.env.TCB_ENV || process.env.SCF_NAMESPACE,
    // SOURCE: process.env.TCB_SOURCE, //QQ环境下这个值不准，先不返回
    CLIENTIP: process.env.TCB_SOURCE_IP || ''
  };
  return qqContext;
}


// CONCATENATED MODULE: ./src/tool/logger.ts


function logger() {
  return external_tcb_admin_node_default.a.logger();
}


// CONCATENATED MODULE: ./src/storage/uploadFile.ts




async function uploadFile(options, config) {
  const apiName = 'uploadFile';

  try {
    const tcbInstance = this.getTcbInstance(config);
    let statusCode = 200;
    assertRequiredParam(options.cloudPath, 'cloudPath', apiName);
    assertRequiredParam(options.fileContent, 'fileContent', apiName);
    const res = await tcbInstance.uploadFile({
      cloudPath: options.cloudPath,
      fileContent: options.fileContent
    }, {
      onResponseReceived(resp) {
        statusCode = resp ? resp.statusCode : statusCode;
      }

    });

    if (res.code && TCB_ERR_CODE[res.code] !== 0) {
      throw {
        errCode: TCB_ERR_CODE[res.code] || TCB_ERR_CODE.SYS_ERR,
        errMsg: res.message
      };
    } else {
      return {
        fileID: res.fileID,
        requestId: res.requestId,
        statusCode
      };
    }
  } catch (err) {
    throw returnAsFinalCloudSDKError(err, apiName);
  }
}


// CONCATENATED MODULE: ./src/storage/getTempFileURL.ts




async function getTempFileURL(options, config) {
  const apiName = 'getTempFileURL';

  try {
    assertArrayNotEmpty(options.fileList, 'fileList', apiName);
    const tcbInstance = this.getTcbInstance(config);
    const res = await tcbInstance.getTempFileURL({
      fileList: options.fileList
    });

    if (res.code && TCB_ERR_CODE[res.code] !== 0) {
      throw {
        errCode: TCB_ERR_CODE[res.code] || TCB_ERR_CODE.SYS_ERR,
        errMsg: res.message
      };
    } else {
      const fileList = (res.fileList || []).filter(s => Boolean(s)).map(file => {
        if (file.code && TCB_ERR_CODE[file.code] !== 0) {
          const code = TCB_ERR_CODE[file.code] || TCB_ERR_CODE.SYS_ERR;
          return {
            fileID: file.fileID,
            status: TCB_ERR_CODE[file.code] || TCB_ERR_CODE.SYS_ERR,
            errMsg: ERR_CODE[code],
            maxAge: file.maxAge,
            tempFileURL: ''
          };
        }

        return {
          fileID: file.fileID,
          status: 0,
          errMsg: 'ok',
          maxAge: file.maxAge,
          tempFileURL: file.tempFileURL
        };
      });
      return {
        fileList,
        requestId: res.requestId
      };
    }
  } catch (err) {
    throw returnAsFinalCloudSDKError(err, apiName);
  }
}


// CONCATENATED MODULE: ./src/storage/deleteFile.ts




async function deleteFile(options, config) {
  const apiName = 'deleteFile';

  try {
    assertArrayNotEmpty(options.fileList, 'fileList', apiName);
    const tcbInstance = this.getTcbInstance(config);
    const res = await tcbInstance.deleteFile({
      fileList: options.fileList
    });

    if (res.code && TCB_ERR_CODE[res.code] !== 0) {
      throw {
        errCode: TCB_ERR_CODE[res.code] || TCB_ERR_CODE.SYS_ERR,
        errMsg: res.message
      };
    } else {
      const fileList = (res.fileList || []).filter(s => Boolean(s)).map(file => {
        if (file.code && TCB_ERR_CODE[file.code] !== 0) {
          const code = TCB_ERR_CODE[file.code] || TCB_ERR_CODE.SYS_ERR;
          return {
            fileID: file.fileID,
            status: TCB_ERR_CODE[file.code] || TCB_ERR_CODE.SYS_ERR,
            errMsg: ERR_CODE[code]
          };
        }

        return {
          fileID: file.fileID,
          status: 0,
          errMsg: 'ok'
        };
      });
      return {
        fileList,
        requestId: res.requestId
      };
    }
  } catch (err) {
    throw returnAsFinalCloudSDKError(err, apiName);
  }
}


// CONCATENATED MODULE: ./src/storage/downloadFile.ts




async function downloadFile(options, config) {
  const apiName = 'downloadFile';

  try {
    assertType(options.fileID, 'string', 'fileID');
    const tcbInstance = this.getTcbInstance(config);
    const statusCode = 200;
    const res = await tcbInstance.downloadFile({
      fileID: options.fileID
    });

    if (res.code && TCB_ERR_CODE[res.code] !== 0) {
      throw {
        errCode: TCB_ERR_CODE[res.code] || TCB_ERR_CODE.SYS_ERR,
        errMsg: res.message || res.code
      };
    }

    return {
      statusCode,
      fileContent: res.fileContent
    };
  } catch (err) {
    throw returnAsFinalCloudSDKError(err, apiName);
  }
}


// CONCATENATED MODULE: ./src/storage/index.ts





// CONCATENATED MODULE: ./src/config/symbol.config.ts
const SYMBOL_DYNAMIC_CURRENT_ENV = Symbol.for('DYNAMIC_CURRENT_ENV');

// CONCATENATED MODULE: ./src/database/helper/error-checker.ts



function checkError(tcbResult) {
  if (tcbResult === null || tcbResult === void 0 ? void 0 : tcbResult.code) {
    throw returnAsCloudSDKError({
      errCode: TCB_ERR_CODE[tcbResult.code] || TCB_ERR_CODE.SYS_ERR,
      errMsg: tcbResult.message
    });
  }
}

function maybeTransformError(maybeTcbError) {
  if (maybeTcbError === null || maybeTcbError === void 0 ? void 0 : maybeTcbError.code) {
    return {
      errCode: TCB_ERR_CODE[maybeTcbError.code] || TCB_ERR_CODE.SYS_ERR,
      errMsg: maybeTcbError.message
    };
  }

  return maybeTcbError;
}


// CONCATENATED MODULE: ./src/database/query.ts





class query_Query {
  constructor(query, collectionName, database) {
    this._query = query;
    this.collectionName = collectionName;
    this.database = database;
  }

  field(object) {
    return new query_Query(this._query.field(object), this.collectionName, this.database);
  }

  where(condition) {
    return new query_Query(this._query.where(condition), this.collectionName, this.database);
  }

  orderBy(fieldPath, order) {
    return new query_Query(this._query.orderBy(fieldPath, order), this.collectionName, this.database);
  }

  limit(max) {
    return new query_Query(this._query.limit(max), this.collectionName, this.database);
  }

  skip(offset) {
    return new query_Query(this._query.skip(offset), this.collectionName, this.database);
  }

  async get() {
    const apiName = 'collection.get';

    try {
      const queryResult = await this._query.get();
      checkError(queryResult);
      return {
        data: queryResult.data,
        errMsg: apiSuccessMsg(apiName)
      };
    } catch (err) {
      throw returnAsFinalCloudSDKError(maybeTransformError(err), apiName);
    }
  }

  async update(options) {
    const apiName = 'collection.update';

    try {
      assertType(options, {
        data: 'object'
      });
      assertObjectNotEmpty({
        name: 'options.data',
        target: options.data
      });
      const updateResult = await this._query.update(options.data);
      checkError(updateResult);
      return {
        stats: {
          updated: updateResult.updated || 0
        },
        errMsg: apiSuccessMsg(apiName)
      };
    } catch (err) {
      throw returnAsFinalCloudSDKError(maybeTransformError(err), apiName);
    }
  }

  async remove() {
    const apiName = 'collection.remove';

    try {
      const removeResult = await this._query.remove();
      checkError(removeResult);
      return {
        stats: {
          removed: removeResult.deleted
        },
        errMsg: apiSuccessMsg(apiName)
      };
    } catch (err) {
      throw returnAsFinalCloudSDKError(maybeTransformError(err), apiName);
    }
  }

  async count() {
    const apiName = 'collection.count';

    try {
      const queryResult = await this._query.count();
      checkError(queryResult);
      return {
        total: queryResult.total,
        errMsg: apiSuccessMsg(apiName)
      };
    } catch (err) {
      throw returnAsFinalCloudSDKError(maybeTransformError(err), apiName);
    }
  }

}


// CONCATENATED MODULE: ./src/database/document.ts
/* eslint-disable @typescript-eslint/naming-convention */




const GET_API_NAME = 'document.get';
const UPDATE_API_NAME = 'document.update';
const SET_API_NAME = 'document.set';
const REMOVE_API_NAME = 'document.remove';

class document_DocumentReference {
  // eslint-disable-next-line max-params
  constructor(_document, collection, docId, database) {
    this._document = _document;
    this.collection = collection;
    this.database = database;
    this._id = docId;
  }

  field(object) {
    assertRequiredParam(object, 'object', 'field');
    assertType(object, 'object', 'field');
    return new document_DocumentReference(this._document.field(object), this.collection, this._id, this.database);
  }

  async get() {
    try {
      const throwOnNotFound = Object.prototype.hasOwnProperty.call(this.database.config, 'throwOnNotFound') ? Boolean(this.database.config.throwOnNotFound) : true;
      const {
        _id
      } = this;
      const queryResult = await this._document.get();
      checkError(queryResult); // in normal doc.get, queryResult.data is array, in transaction, it is object instead

      if (!queryResult.data || Array.isArray(queryResult.data) && !queryResult.data.length) {
        if (throwOnNotFound) {
          throw `document with _id ${_id} does not exist`;
        } else {
          return {
            data: null,
            errMsg: apiSuccessMsg(GET_API_NAME)
          };
        }
      } else {
        return {
          data: Array.isArray(queryResult.data) ? queryResult.data[0] : queryResult.data,
          errMsg: apiSuccessMsg(GET_API_NAME)
        };
      }
    } catch (err) {
      throw returnAsFinalCloudSDKError(maybeTransformError(err), GET_API_NAME);
    }
  }

  async set(options) {
    try {
      assertType(options, {
        data: 'object'
      });
      assertObjectNotEmpty({
        name: 'options.data',
        target: options.data
      });
      const {
        _id
      } = this;
      const setResult = await this._document.set(options.data);
      checkError(setResult);
      return {
        _id,
        errMsg: apiSuccessMsg(SET_API_NAME),
        stats: {
          updated: setResult.updated,
          created: setResult.upsertedId ? 1 : 0
        }
      };
    } catch (err) {
      throw returnAsFinalCloudSDKError(maybeTransformError(err), SET_API_NAME);
    }
  }

  async update(options) {
    try {
      assertType(options, {
        data: 'object'
      });
      assertObjectNotEmpty({
        name: 'options.data',
        target: options.data
      });
      const updateResult = await this._document.update(options.data);
      checkError(updateResult);
      return {
        stats: {
          updated: updateResult.updated
        },
        errMsg: apiSuccessMsg(UPDATE_API_NAME)
      };
    } catch (err) {
      throw returnAsFinalCloudSDKError(maybeTransformError(err), UPDATE_API_NAME);
    }
  }

  async remove() {
    try {
      // normal doc.remove -> _doc.remove
      // transaction doc.remove -> _doc.delete
      const removeResult = await (this._document.remove ? this._document.remove() : this._document.delete());
      checkError(removeResult);
      return {
        stats: {
          removed: removeResult.deleted || 0
        },
        errMsg: apiSuccessMsg(REMOVE_API_NAME)
      };
    } catch (err) {
      throw returnAsFinalCloudSDKError(maybeTransformError(err), REMOVE_API_NAME);
    }
  }

}


// CONCATENATED MODULE: ./src/database/aggregate.ts
/* eslint-disable @typescript-eslint/naming-convention */




class aggregate_Aggregate {
  constructor(_aggregate, collectionName, database) {
    this._aggregate = _aggregate;
    this.collectionName = collectionName;
    this.database = database;
  }

  pushStage(stage, val) {
    return new aggregate_Aggregate(this._aggregate[stage](val), this.collectionName, this.database);
  }

  addFields(val) {
    return this.pushStage('addFields', val);
  }

  bucket(val) {
    return this.pushStage('bucket', val);
  }

  bucketAuto(val) {
    return this.pushStage('bucketAuto', val);
  }

  collStats(val) {
    return this.pushStage('collStats', val);
  }

  count(val) {
    return this.pushStage('count', val);
  }

  facet(val) {
    return this.pushStage('facet', val);
  }

  geoNear(val) {
    return this.pushStage('geoNear', val);
  }

  graphLookup(val) {
    return this.pushStage('graphLookup', val);
  }

  group(val) {
    return this.pushStage('group', val);
  }

  indexStats() {
    return this.pushStage('indexStats', {});
  }

  limit(val) {
    return this.pushStage('limit', val);
  }

  lookup(val) {
    return this.pushStage('lookup', val);
  }

  match(val) {
    return this.pushStage('match', val);
  }

  out(val) {
    return this.pushStage('out', val);
  }

  project(val) {
    return this.pushStage('project', val);
  }

  redact(val) {
    return this.pushStage('redact', val);
  }

  replaceRoot(val) {
    return this.pushStage('replaceRoot', val);
  }

  sample(val) {
    return this.pushStage('sample', val);
  }

  skip(val) {
    return this.pushStage('skip', val);
  }

  sort(val) {
    return this.pushStage('sort', val);
  }

  sortByCount(val) {
    return this.pushStage('sortByCount', val);
  }

  unwind(val) {
    return this.pushStage('unwind', val);
  }

  async end() {
    const apiName = 'collection.aggregate';

    try {
      const result = await this._aggregate.end();
      checkError(result);
      return {
        list: result.data,
        errMsg: apiSuccessMsg(apiName)
      };
    } catch (err) {
      throw returnAsFinalCloudSDKError(err, apiName);
    }
  }

}


// CONCATENATED MODULE: ./src/database/collection.ts
/* eslint-disable @typescript-eslint/naming-convention */








class collection_CollectionReference extends query_Query {
  constructor(_collection, collectionName, database) {
    super(_collection, collectionName, database);
    this._collection = _collection;
    this.collectionName = collectionName;
    this.database = database;
  }

  doc(docId) {
    return new document_DocumentReference(this._collection.doc(docId), this, docId, this.database);
  }

  async add(options) {
    const apiName = 'collection.add';

    try {
      assertType(options, {
        data: 'object'
      });
      assertObjectNotEmpty({
        name: 'options.data',
        target: options.data
      });
      const addResult = await this._collection.add(options.data);
      checkError(addResult);
      return {
        _id: addResult.id,
        errMsg: apiSuccessMsg(apiName)
      };
    } catch (err) {
      throw returnAsFinalCloudSDKError(maybeTransformError(err), apiName);
    }
  }

  aggregate() {
    return new aggregate_Aggregate(this._collection.aggregate(), this.collectionName, this.database);
  }

}


// CONCATENATED MODULE: ./src/database/transaction.ts
/* eslint-disable no-underscore-dangle */

/* eslint-disable @typescript-eslint/naming-convention */



class transaction_Transaction {
  constructor(transaction, db) {
    this._transaction = transaction;
    this._db = db;
  }

  async init() {
    return this._transaction.init();
  }

  collection(collName) {
    if (!collName) {
      throw new Error('Collection name is required');
    }

    return new collection_CollectionReference(this._transaction.collection(collName), collName, this._db);
  }

  async commit() {
    try {
      return this._transaction.commit();
    } catch (e) {
      throw returnAsFinalCloudSDKError(e, 'transaction.commit');
    }
  }

  async rollback(reason) {
    try {
      return this._transaction.rollback(reason);
    } catch (e) {
      throw returnAsFinalCloudSDKError(e, 'transaction.rollback');
    }
  }

}

async function runTransaction(callback, times = 3) {
  return this._db.runTransaction(_transaction => {
    const transaction = new transaction_Transaction(_transaction, this);
    return callback(transaction);
  }, times);
}

async function startTransaction() {
  const _transaction = await this._db.startTransaction();

  return new transaction_Transaction(_transaction, this);
}


// CONCATENATED MODULE: ./src/database/geo.ts
/* eslint-disable @typescript-eslint/naming-convention */
function initGeo(_geo) {
  const Geo = {}; // eslint-disable-next-line no-restricted-syntax

  for (const key in _geo) {
    if (Object.prototype.hasOwnProperty.call(_geo, key)) {
      if (typeof _geo[key] === 'function') {
        Geo[key] = function (...args) {
          return new _geo[key](...args);
        };
      } else {
        Geo[key] = _geo[key];
      }
    }
  }

  return Geo;
}


// CONCATENATED MODULE: ./src/database/database.ts








class database_Database {
  constructor(cloud, config = {}) {
    this.cloud = cloud;
    this.config = config;

    if (config.env) {
      assertType(config.env, 'string');
    }

    this.tcbInstance = this.cloud.getTcbInstance({
      config,
      type: 'database'
    });
    this._db = this.tcbInstance.database();
    this.command = this._db.command;
    this.Geo = initGeo(this._db.Geo);
    this.serverDate = this._db.serverDate;
    this.RegExp = this._db.RegExp;
  }

  collection(collectionName) {
    return new collection_CollectionReference(this._db.collection(collectionName), collectionName, this);
  }

  async createCollection(collectionName) {
    const apiName = 'createCollection';

    try {
      const result = await this._db.createCollection(collectionName);
      checkError(result);
      return {
        errMsg: apiSuccessMsg(apiName),
        requestId: result.requestId
      };
    } catch (e) {
      throw returnAsFinalCloudSDKError(e, apiName);
    }
  }

  startTransaction() {
    return startTransaction.call(this);
  }

  runTransaction(callback, times = 3) {
    return runTransaction.call(this, callback, times);
  }

}

function getDatabase(cloud, config) {
  return new database_Database(cloud, config);
}


// CONCATENATED MODULE: ./src/extension/index.ts


async function registerExtension(...args) {
  const tcbInstance = this.getTcbInstance(); // eslint-disable-next-line prefer-spread

  tcbInstance.registerExtension.apply(tcbInstance, args);
}

async function invokeExtension(...args) {
  const apiName = 'invokeExtension';

  try {
    const tcbInstance = this.getTcbInstance();
    return await tcbInstance.invokeExtension(...args);
  } catch (err) {
    throw returnAsFinalCloudSDKError(err, apiName);
  }
}


// CONCATENATED MODULE: ./src/cloud/index.ts
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }













class cloud_Cloud {
  get callFunction() {
    return this.wrapCommonAPICheck(callFunction);
  }

  get logger() {
    return logger.bind(this);
  }

  get getQQContext() {
    return getQQContext.bind(this);
  }

  get uploadFile() {
    return this.wrapCommonAPICheck(uploadFile);
  }

  get getTempFileURL() {
    return this.wrapCommonAPICheck(getTempFileURL);
  }

  get deleteFile() {
    return this.wrapCommonAPICheck(deleteFile);
  }

  get downloadFile() {
    return this.wrapCommonAPICheck(downloadFile);
  }

  get registerExtension() {
    return this.wrapCommonAPICheck(registerExtension);
  }

  get invokeExtension() {
    return invokeExtension.bind(this);
  }

  constructor() {
    this.inited = false;
    this.config = {};
  }

  get DYNAMIC_CURRENT_ENV() {
    return SYMBOL_DYNAMIC_CURRENT_ENV;
  }

  init(options) {
    if (this.inited) {
      return;
    }

    const {
      env,
      timeout = 15000
    } = options;
    assertType(timeout, 'number');
    this.inited = true;
    this.config = _objectSpread(_objectSpread({}, this.config), {}, {
      env,
      timeout
    });
  }

  database(config = {}) {
    return this.wrapCommonAPICheck(getDatabase)(this, config);
  }

  wrapCommonAPICheck(func) {
    return (...args) => {
      if (!this.inited) {
        throw new error_CloudSDKError({
          errMsg: 'Cloud API isn\'t enabled, please call init first\n请先调用 init 完成初始化后再调用其他云 API。init 方法可传入一个对象用于设置默认配置，详见文档。'
        });
      }

      return func.apply(this, args);
    };
  }

  getTcbInstance({
    config = {},
    type = 'default'
  } = {}) {
    const newConfig = _objectSpread(_objectSpread({}, this.config), config);

    newConfig.env = this.translateEnv(newConfig, type);
    return external_tcb_admin_node_default.a.init(newConfig);
  }

  translateEnv(config = {}, type = 'default') {
    let env;

    const newConfig = _objectSpread(_objectSpread({}, this.config), config);

    if (getType(newConfig.env) === 'object') {
      env = newConfig.env[type] || newConfig.env.default;
    } else {
      // eslint-disable-next-line prefer-destructuring
      env = newConfig.env;
    }

    if (env === SYMBOL_DYNAMIC_CURRENT_ENV) {
      env = external_tcb_admin_node_default.a.getCurrentEnv();
    }

    return env;
  }

}


// CONCATENATED MODULE: ./src/index.ts

const src_cloud = new cloud_Cloud();
/* harmony default export */ var src = __webpack_exports__["default"] = (src_cloud);

/***/ })
/******/ ])["default"];